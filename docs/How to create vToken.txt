Step 1: Set Up Your Environment

Go to the Stellar Laboratory: https://laboratory.stellar.org/.
Switch to the "Test Network" tab in the top right (for practice). For mainnet, switch to "Public Network" later.
You'll use the "Transaction Builder" section for most operations.

Step 2: Create the Issuer and Distributor Accounts
You need two accounts:

Issuer Account: Creates and issues the asset (think of it as the "minting" account).
Distributor Account: Receives the initial supply and distributes it to users (prevents the issuer from directly controlling distribution).

Substeps:
a. Generate keypairs for both accounts:

In Stellar Laboratory, go to "Account Creator" (or use the SDK if coding).
Click "Generate keypair" twice (once for issuer, once for distributor).
Note down the Public Key (starts with "G...") and Secret Key (starts with "S...") for each. Store secrets securely—never share them.
Example output: Public Key: GCEXAMPLEPUBLICKEY123, Secret Key: SCEXAMPLESECRETKEY456.

b. Fund the accounts (on testnet):

Go to the "Friendbot" section in Laboratory (or directly: https://laboratory.stellar.org/#account-creator?network=test).
Enter the public key of the issuer account and click "Get test XLM" (funds it with 10,000 test XLM).
Repeat for the distributor account.
Verify balances: In Laboratory's "Account Viewer," enter a public key. You should see a balance of ~10,000 XLM.

On mainnet: Send XLM from an exchange wallet to these public keys (minimum 1 XLM per account + fees).
Step 3: Establish a Trustline
A trustline is like "permission" for an account to hold your custom asset. The distributor must trust the issuer's asset before it can receive it. Without this, transactions will fail.
Substeps:
a. In Stellar Laboratory, go to "Transaction Builder."
b. Enter the distributor's public key in the "Source Account" field.
c. Click "Fetch next sequence number" (auto-fills the sequence).
d. Leave "Transaction Fee" at default (100 stroops = 0.00001 XLM).
e. Under "Operations," add an operation:

Operation Type: "Change Trust."
Asset: Select "Alphanumeric 4" or "Alphanumeric 12" (for asset code length; e.g., "MYTOKEN" for a 7-char code uses Alphanumeric 12).
Asset Code: Enter your custom token's code (1-12 chars, e.g., "MYTOKEN").
Issuer Account ID: Enter the issuer's public key.
Limit: Enter the maximum amount the distributor can hold (e.g., "1000000" for 1 million tokens; use "922337203685.4775807" for unlimited).
f. Click "Sign Transaction."
g. Enter the distributor's secret key to sign.
h. Submit the transaction. You'll see a success message with a transaction ID.
i. Verify: In Account Viewer, check the distributor's balances—it should now show a trustline for your asset (balance 0 initially).

Step 4: Issue the Custom Asset (Create the Token Supply)
Issuing happens by "paying" the distributor from the issuer in the new asset code—this creates the tokens on the blockchain.
Substeps:
a. In Transaction Builder:

Source Account: Issuer's public key.
Fetch sequence number.
Add Operation: "Payment."
Destination: Distributor's public key.
Asset: Same as above (your asset code + issuer's public key).
Amount: Enter the initial supply (e.g., "1000000" for 1 million tokens).
b. Sign with the issuer's secret key.
c. Submit. Success creates the tokens!
d. Verify: Check the distributor's account in Account Viewer—it should now show a balance of your asset (e.g., 1,000,000 MYTOKEN).

Note: Assets have 7 decimal places by default, so "1000000" = 1,000,000.0000000 tokens.
Step 5: Lock the Issuer Account (Recommended for Trust)
To prove no more tokens can be issued (preventing inflation), lock the issuer by disabling its ability to sign transactions.
Substeps:
a. In Transaction Builder:

Source Account: Issuer's public key.
Fetch sequence.
Add Operation: "Set Options."
Master Weight: Set to "0" (disables the account from future changes).
Set Flags: (Optional) Clear "Authorization required" if needed.
b. Sign with the issuer's secret key (last time you'll use it).
c. Submit.
d. The issuer is now locked—verify in Account Viewer (it can't issue more).

Step 6: Set Up Distribution and Additional Trustlines
Now distribute tokens to users.
Substeps:
a. For each recipient (user account):

Create/fund their account (as in Step 2).
Have them establish a trustline to your asset (as in Step 3, using their account as source).
b. Distribute tokens:
In Transaction Builder:

Source: Distributor's public key.
Operation: "Payment."
Destination: Recipient's public key.
Asset: Your asset.
Amount: e.g., "100".


Sign with distributor's secret key and submit.
c. Advanced distribution:
Use Stellar's built-in Decentralized Exchange (DEX): Create sell offers in Transaction Builder (Operation: "Manage Sell Offer") to trade your token for XLM or other assets.
For automation: Use Stellar SDKs (e.g., JavaScript, Python) to build apps/wallets. Example in Python: Install stellar-sdk, load keys, build/submit transactions.
Airdrops: Send small amounts to many accounts (batch via SDK).
Compliance: Set flags on the asset (e.g., "Authorization required") via Set Options on issuer before locking, to control who can hold/transfer.

Step 7: Monitor and Manage

Use Account Viewer in Laboratory to check balances and trustlines.
Explore via Horizon API: https://horizon.stellar.org/ (append /accounts/{public_key} to query).
For production: Integrate with wallets like Lobstr or use exchanges that support Stellar assets (e.g., list on Stellar DEX).
Costs: Minimal (~$0.000001 per transaction). Reserves: Each trustline reserves 0.5 XLM per account.

Common Pitfalls and Best Practices

Errors: "No trustline" means repeat Step 3. "Insufficient balance" means fund with XLM.
Security: Never expose secret keys. Use hardware wallets for mainnet.
Regulations: If tokenizing real assets, comply with laws (e.g., KYC via asset flags).
Scalability: Stellar handles ~1,000 TPS, low fees—great for tokens.
Next Steps: Read official docs for advanced features like clawback or authorization.
If coding: Use Stellar SDK (e.g., pip install stellar-sdk in Python) for automation.

This creates a fully functional custom token. If you encounter issues or want code examples, provide more details!2.9sHow can Grok help?
